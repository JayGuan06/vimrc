set nocompatible " be iMproved, required
filetype off " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

 

" The following are examples of different formats supported.
" All of your Plugins must be added before the following line
call vundle#end() " required
filetype plugin indent on " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList - lists configured plugins
" :PluginInstall - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"
" Add general set
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" " according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif
"
"if has("autocmd")
"	au BufReadPost * if line("`\"") > 1 && line("`\"") <= line("$") | exe "normal! g`\"" | endif
"	"for simplicity, "au BufReadPost * exe "normal! g`\"", is Okay.
"endif

"Add general set
set t_Co=256
set showcmd     " Show (partial) command in status line.
set showmatch       " Show matching brackets.
"set ignorecase     " Do case insensitive matching
""set smartcase      " Do smart case matching
"set incsearch      " Incremental search
""set autowrite      " Automatically save before commands like :next and :make
"set hidden     " Hide buffers when they are abandoned
set mouse=a        " Enable mouse usage (all modes)

" others set 
syntax on
set nu
set hlsearch 
"ctermbg=black ctermfg=white guibg=darkred guifg=white
"
 nmap    w=  :resize +3<CR>
 nmap    w-  :resize -3<CR>
 nmap    w,  :vertical resize -3<CR>
 nmap    w.  :vertical resize +3<CR>
"
"
" colorscheme peachpuff 
 set cindent
 set tabstop=4
 set softtabstop=4
 set shiftwidth=4
 set autoindent
 set cindent
 set cinoptions={0,1s,t0,n-2,p2s,(03s,=.5s,>1s,=1s,:1s
 set statusline=%F\ [%{&fenc}\ %{&ff}\ L%l/%L\ C%c]\%=%{strftime('%Y-%m-%d\ %H:%M')} 
hi statusline cterm=NONE
hi statusline  ctermbg=239 ctermfg=249
set laststatus=2

 set cursorline
hi CursorLine cterm=NONE ctermbg=236  
hi MatchParen ctermbg=24
highlight LineNr ctermbg=236
highlight LineNr ctermfg=249

hi PMenu cterm=NONE ctermbg=236 ctermfg=253
hi PMenuSel cterm=NONE ctermbg=245 ctermfg=253

hi search term=reverse ctermbg=24 guibg=Cyan

"文件保存与退出
nmap fw     :w<CR>
nmap fq     :q<CR>
nmap fwq    :wq<CR>
" map ESC

"split win under the window
nmap <C-v> :split<CR>

"************** tagbar start ***********************************************
 Plugin 'majutsushi/tagbar'
 nmap <Leader>tb :TagbarToggle<CR>      "快捷键设置
 let g:tagbar_ctags_bin='ctags'          "ctags程序的路径
 let g:tagbar_width=30                   "窗口宽度的设置
 map <F7>  :Tagbar<CR>
  let g:tagbar_autofocus = 1 
" autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen()
 "如果是c语言的程序的话，tagbar自动开启
 "************** targbar end ***********************************************

"********************************** NERDTree start *****************************************
 Plugin 'scrooloose/nerdtree'
 let NERDTreeWinPos='left'
 let NERDTreeWinSize=30
 map <F5> :NERDTreeToggle<CR>
 " NERD tree
 let NERDChristmasTree=0
 let NERDTreeWinSize=35
 let NERDTreeChDirMode=2
 let NERDTreeIgnore=['\~$', '\.pyc$', '\.swp$']
 let NERDTreeShowBookmarks=1
 let NERDTreeWinPos="left"
 " Automatically open a NERDTree if no files where specified
 autocmd vimenter * if !argc() | NERDTree | endif
 " Close vim if the only window left open is a NERDTree
 autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") &&b:NERDTreeType == "primary") | q | endif
 " " Open a NERDTree
" ********NERD Tree
"********************************** NERDTree end *****************************************
 

"********************************** syntastic start *****************************************
"Plugin 'vim-syntastic/syntastic'
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"********************************** syntastic  end *****************************************

 
 
 
 
 
 
 "********************************** ctrlp set start *****************************************
 "ctrlp
 ""<Leader>p搜索当前目录下文件
 "let g:ctrlp_map = '<Leader>p'
 "let g:ctrlp_cmd = 'CtrlP'
 "<Leader>f搜索MRU文件
 "nmap <Leader>f :CtrlPMRUFiles<CR>
 ""<Leader>b显示缓冲区文件，并可通过序号进行跳转
 "nmap <Leader>b :CtrlPBuffer<CR>
 "设置搜索时忽略的文件
 "let g:ctrlp_custom_ignore = {
 " \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
 " \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
 " \ }
 "let g:ctrlp_working_path_mode = 0
 "let g:ctrlp_match_window_bottom = 1
             "修改QuickFix窗口显示的最大条目数
 "let g:ctrlp_max_height = 15
 "let g:ctrlp_match_window_reversed = 0
        "设置MRU最大条目数为500
 "let g:ctrlp_mruf_max = 500
 "let g:ctrlp_follow_symlinks = 1
 "            "默认使用全路径搜索，置1后按文件名搜索，准确率会有所提高，可以用<C-d>进行切换
 "let g:ctrlp_by_filename = 1
   "默认不使用正则表达式，置1改为默认使用正则表达式，可以用<C-r>进行切换
 "let g:ctrlp_regexp = 0
 "自定义搜索列表的提示符
 "let g:ctrlp_line_prefix = '♪ '
 "********************************** ctrlp set end *****************************************
 
 

"************************************** for YCM set start **********************************
Plugin 'Valloric/YouCompleteMe'
let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/.ycm_extra_conf.py'
hi SpellBad  term=reverse ctermbg=1 ctermfg=15 gui=undercurl guisp=Red
" open error win
nmap <F6> :YcmDiags<CR>
set splitbelow
".c .h jump
nmap <F4> :A<CR>
"jum fuction
nmap <F6>:YcmCompleter GoTo<CR> 


"let g:ycm_global_ycm_extra_conf='~/.vim/bundle/YouCompleteMe/.ycm_extra_conf_cpp.py'
"highlight PMenu cterm=NONE ctermfg=50 ctermbg=242 
"highlight PMenuSel cterm=NONE ctermfg=242 ctermbg=8 

"let g:ycm_min_num_identifier_candidate_chars = 2
"let g:ycm_key_invoke_completion = '<c-space>'

"nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
"nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
"nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
"nmap <F4> :YcmDiags<CR>
"let g:ycm_key_invoke_completion = '<C-Space>'
"let g:ycm_auto_trigger = 1
"let g:ycm_cache_omnifunc = 1
"let g:ycm_collect_identifiers_from_tags_files=1  
"let g:ycm_semantic_triggers =  {
 " \   'c': ['->', '.'],
  "\   'objc': ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
  "\            're!\[.*\]\s'],
  "\   'ocaml': ['.', '#'],
  "\   'cpp,cuda,objcpp': ['->', '.', '::'],
  "\   'perl': ['->'],
  "\   'php': ['->', '::'],
  "\   'cs,d,elixir,go,groovy,java,javascript,julia,perl6,python,scala,typescript,vb': ['.'],
  "\   'ruby,rust': ['.', '::'],
  "\   'lua': ['.', ':'],
  "\   'erlang': [':'],
  "\ }

"************************************** for YCM set end **********************************
"
"
"
"
 "Plugin 'vim-scripts/gdbmgr'

"################## for nerdcommenter set start###############################
 "Plugin 'scrooloose/nerdcommenter'
 "Add spaces after comment delimiters by default
 "let g:NERDSpaceDelims = 1

 " Use compact syntax for prettified multi-line comments
 "let g:NERDCompactSexyComs = 1

 " Align line-wise comment delimiters flush left instead of following code indentation
 "let g:NERDDefaultAlign = 'left'

 " Set a language to use its alternate delimiters by default
 "let g:NERDAltDelims_java = 1

 " Add your own custom formats or override the defaults
 "let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

 " Allow commenting and inverting empty lines (useful when commenting a region)
 "let g:NERDCommentEmptyLines = 1

 " Enable trimming of trailing whitespace when uncommenting
 "let g:NERDTrimTrailingWhitespace = 1

 " Enable NERDCommenterToggle to check all selected lines is commented or not 
 "let g:NERDToggleCheckAllLines = 1

 "############################### for echofunc set start####################
 "Plugin 'vim-script/Echofunc'
